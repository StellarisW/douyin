// Code generated by goctl. DO NOT EDIT.
// Source: video.sys.proto

package sys

import (
	"context"

	"douyin/app/service/video/rpc/sys/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Comment            = pb.Comment
	CommentReq         = pb.CommentReq
	CommentRes         = pb.CommentRes
	FavoriteReq        = pb.FavoriteReq
	FavoriteRes        = pb.FavoriteRes
	FeedReq            = pb.FeedReq
	FeedRes            = pb.FeedRes
	GetCommentListReq  = pb.GetCommentListReq
	GetCommentListRes  = pb.GetCommentListRes
	GetFavoriteListReq = pb.GetFavoriteListReq
	GetFavoriteListRes = pb.GetFavoriteListRes
	GetPublishListReq  = pb.GetPublishListReq
	GetPublishListRes  = pb.GetPublishListRes
	ManageCommentReq   = pb.ManageCommentReq
	ManageCommentRes   = pb.ManageCommentRes
	Profile            = pb.Profile
	PublishReq         = pb.PublishReq
	PublishRes         = pb.PublishRes
	Video              = pb.Video

	Sys interface {
		Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishRes, error)
		GetPublishList(ctx context.Context, in *GetPublishListReq, opts ...grpc.CallOption) (*GetPublishListRes, error)
		Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedRes, error)
		Favorite(ctx context.Context, in *FavoriteReq, opts ...grpc.CallOption) (*FavoriteRes, error)
		GetFavoriteList(ctx context.Context, in *GetFavoriteListReq, opts ...grpc.CallOption) (*GetFavoriteListRes, error)
		Comment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*CommentRes, error)
		ManageComment(ctx context.Context, in *ManageCommentReq, opts ...grpc.CallOption) (*ManageCommentRes, error)
		GetCommentList(ctx context.Context, in *GetCommentListReq, opts ...grpc.CallOption) (*GetCommentListRes, error)
	}

	defaultSys struct {
		cli zrpc.Client
	}
)

func NewSys(cli zrpc.Client) Sys {
	return &defaultSys{
		cli: cli,
	}
}

func (m *defaultSys) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*PublishRes, error) {
	client := pb.NewSysClient(m.cli.Conn())
	return client.Publish(ctx, in, opts...)
}

func (m *defaultSys) GetPublishList(ctx context.Context, in *GetPublishListReq, opts ...grpc.CallOption) (*GetPublishListRes, error) {
	client := pb.NewSysClient(m.cli.Conn())
	return client.GetPublishList(ctx, in, opts...)
}

func (m *defaultSys) Feed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedRes, error) {
	client := pb.NewSysClient(m.cli.Conn())
	return client.Feed(ctx, in, opts...)
}

func (m *defaultSys) Favorite(ctx context.Context, in *FavoriteReq, opts ...grpc.CallOption) (*FavoriteRes, error) {
	client := pb.NewSysClient(m.cli.Conn())
	return client.Favorite(ctx, in, opts...)
}

func (m *defaultSys) GetFavoriteList(ctx context.Context, in *GetFavoriteListReq, opts ...grpc.CallOption) (*GetFavoriteListRes, error) {
	client := pb.NewSysClient(m.cli.Conn())
	return client.GetFavoriteList(ctx, in, opts...)
}

func (m *defaultSys) Comment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*CommentRes, error) {
	client := pb.NewSysClient(m.cli.Conn())
	return client.Comment(ctx, in, opts...)
}

func (m *defaultSys) ManageComment(ctx context.Context, in *ManageCommentReq, opts ...grpc.CallOption) (*ManageCommentRes, error) {
	client := pb.NewSysClient(m.cli.Conn())
	return client.ManageComment(ctx, in, opts...)
}

func (m *defaultSys) GetCommentList(ctx context.Context, in *GetCommentListReq, opts ...grpc.CallOption) (*GetCommentListRes, error) {
	client := pb.NewSysClient(m.cli.Conn())
	return client.GetCommentList(ctx, in, opts...)
}
