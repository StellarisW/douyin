// Code generated by goctl. DO NOT EDIT!
// Source: chat.sys.proto

package server

import (
	"context"
	"douyin/app/common/log"
	"go.uber.org/zap"

	"douyin/app/service/chat/rpc/sys/internal/logic"
	"douyin/app/service/chat/rpc/sys/internal/svc"
	"douyin/app/service/chat/rpc/sys/pb"
)

type SysServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedSysServer
}

func NewSysServer(svcCtx *svc.ServiceContext) *SysServer {
	return &SysServer{
		svcCtx: svcCtx,
	}
}

func (s *SysServer) SendMessage(ctx context.Context, in *pb.SendMessageReq) (*pb.SendMessageRes, error) {
	log.Logger.Debug("recv:", zap.String("msg", in.String()))
	l := logic.NewSendMessageLogic(ctx, s.svcCtx)
	res, err := l.SendMessage(in)
	log.Logger.Debug("send:", zap.String("msg", res.String()))
	return res, err
}

func (s *SysServer) GetMessage(ctx context.Context, in *pb.GetMessageReq) (*pb.GetMessageRes, error) {
	log.Logger.Debug("recv:", zap.String("msg", in.String()))
	l := logic.NewGetMessageLogic(ctx, s.svcCtx)
	res, err := l.GetMessage(in)
	log.Logger.Debug("send:", zap.String("msg", res.String()))
	return res, err
}

func (s *SysServer) StoreMessage(ctx context.Context, in *pb.StoreMessageReq) (*pb.StoreMessageRes, error) {
	log.Logger.Debug("recv:", zap.String("msg", in.String()))
	l := logic.NewStoreMessageLogic(ctx, s.svcCtx)
	res, err := l.StoreMessage(in)
	log.Logger.Debug("send:", zap.String("msg", res.String()))
	return res, err
}
