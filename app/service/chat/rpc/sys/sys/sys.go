// Code generated by goctl. DO NOT EDIT!
// Source: chat.sys.proto

package sys

import (
	"context"

	"douyin/app/service/chat/rpc/sys/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetMessageReq   = pb.GetMessageReq
	GetMessageRes   = pb.GetMessageRes
	Message         = pb.Message
	SendMessageReq  = pb.SendMessageReq
	SendMessageRes  = pb.SendMessageRes
	StoreMessageReq = pb.StoreMessageReq
	StoreMessageRes = pb.StoreMessageRes

	Sys interface {
		SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageRes, error)
		GetMessage(ctx context.Context, in *GetMessageReq, opts ...grpc.CallOption) (*GetMessageRes, error)
		StoreMessage(ctx context.Context, in *StoreMessageReq, opts ...grpc.CallOption) (*StoreMessageRes, error)
	}

	defaultSys struct {
		cli zrpc.Client
	}
)

func NewSys(cli zrpc.Client) Sys {
	return &defaultSys{
		cli: cli,
	}
}

func (m *defaultSys) SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageRes, error) {
	client := pb.NewSysClient(m.cli.Conn())
	return client.SendMessage(ctx, in, opts...)
}

func (m *defaultSys) GetMessage(ctx context.Context, in *GetMessageReq, opts ...grpc.CallOption) (*GetMessageRes, error) {
	client := pb.NewSysClient(m.cli.Conn())
	return client.GetMessage(ctx, in, opts...)
}

func (m *defaultSys) StoreMessage(ctx context.Context, in *StoreMessageReq, opts ...grpc.CallOption) (*StoreMessageRes, error) {
	client := pb.NewSysClient(m.cli.Conn())
	return client.StoreMessage(ctx, in, opts...)
}
