// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: auth.token_store.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenStoreClient is the client API for TokenStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenStoreClient interface {
	StoreToken(ctx context.Context, in *StoreTokenReq, opts ...grpc.CallOption) (*StoreTokenRes, error)
	GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*GetTokenRes, error)
	RemoveToken(ctx context.Context, in *RemoveTokenReq, opts ...grpc.CallOption) (*RemoveTokenRes, error)
}

type tokenStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenStoreClient(cc grpc.ClientConnInterface) TokenStoreClient {
	return &tokenStoreClient{cc}
}

func (c *tokenStoreClient) StoreToken(ctx context.Context, in *StoreTokenReq, opts ...grpc.CallOption) (*StoreTokenRes, error) {
	out := new(StoreTokenRes)
	err := c.cc.Invoke(ctx, "/auth.token_store.TokenStore/StoreToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenStoreClient) GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*GetTokenRes, error) {
	out := new(GetTokenRes)
	err := c.cc.Invoke(ctx, "/auth.token_store.TokenStore/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenStoreClient) RemoveToken(ctx context.Context, in *RemoveTokenReq, opts ...grpc.CallOption) (*RemoveTokenRes, error) {
	out := new(RemoveTokenRes)
	err := c.cc.Invoke(ctx, "/auth.token_store.TokenStore/RemoveToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenStoreServer is the server API for TokenStore service.
// All implementations must embed UnimplementedTokenStoreServer
// for forward compatibility
type TokenStoreServer interface {
	StoreToken(context.Context, *StoreTokenReq) (*StoreTokenRes, error)
	GetToken(context.Context, *GetTokenReq) (*GetTokenRes, error)
	RemoveToken(context.Context, *RemoveTokenReq) (*RemoveTokenRes, error)
	mustEmbedUnimplementedTokenStoreServer()
}

// UnimplementedTokenStoreServer must be embedded to have forward compatible implementations.
type UnimplementedTokenStoreServer struct {
}

func (UnimplementedTokenStoreServer) StoreToken(context.Context, *StoreTokenReq) (*StoreTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreToken not implemented")
}
func (UnimplementedTokenStoreServer) GetToken(context.Context, *GetTokenReq) (*GetTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedTokenStoreServer) RemoveToken(context.Context, *RemoveTokenReq) (*RemoveTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveToken not implemented")
}
func (UnimplementedTokenStoreServer) mustEmbedUnimplementedTokenStoreServer() {}

// UnsafeTokenStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenStoreServer will
// result in compilation errors.
type UnsafeTokenStoreServer interface {
	mustEmbedUnimplementedTokenStoreServer()
}

func RegisterTokenStoreServer(s grpc.ServiceRegistrar, srv TokenStoreServer) {
	s.RegisterService(&TokenStore_ServiceDesc, srv)
}

func _TokenStore_StoreToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenStoreServer).StoreToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.token_store.TokenStore/StoreToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenStoreServer).StoreToken(ctx, req.(*StoreTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenStore_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenStoreServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.token_store.TokenStore/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenStoreServer).GetToken(ctx, req.(*GetTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenStore_RemoveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenStoreServer).RemoveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.token_store.TokenStore/RemoveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenStoreServer).RemoveToken(ctx, req.(*RemoveTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenStore_ServiceDesc is the grpc.ServiceDesc for TokenStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.token_store.TokenStore",
	HandlerType: (*TokenStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreToken",
			Handler:    _TokenStore_StoreToken_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _TokenStore_GetToken_Handler,
		},
		{
			MethodName: "RemoveToken",
			Handler:    _TokenStore_RemoveToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.token_store.proto",
}
