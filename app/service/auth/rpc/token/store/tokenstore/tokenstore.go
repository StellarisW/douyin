// Code generated by goctl. DO NOT EDIT!
// Source: auth.token_store.proto

package tokenstore

import (
	"context"

	"douyin/app/service/auth/rpc/token/store/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetTokenReq      = pb.GetTokenReq
	GetTokenRes      = pb.GetTokenRes
	GetTokenRes_Data = pb.GetTokenRes_Data
	RemoveTokenReq   = pb.RemoveTokenReq
	RemoveTokenRes   = pb.RemoveTokenRes
	StoreTokenReq    = pb.StoreTokenReq
	StoreTokenRes    = pb.StoreTokenRes
	Token            = pb.Token

	TokenStore interface {
		StoreToken(ctx context.Context, in *StoreTokenReq, opts ...grpc.CallOption) (*StoreTokenRes, error)
		GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*GetTokenRes, error)
		RemoveToken(ctx context.Context, in *RemoveTokenReq, opts ...grpc.CallOption) (*RemoveTokenRes, error)
	}

	defaultTokenStore struct {
		cli zrpc.Client
	}
)

func NewTokenStore(cli zrpc.Client) TokenStore {
	return &defaultTokenStore{
		cli: cli,
	}
}

func (m *defaultTokenStore) StoreToken(ctx context.Context, in *StoreTokenReq, opts ...grpc.CallOption) (*StoreTokenRes, error) {
	client := pb.NewTokenStoreClient(m.cli.Conn())
	return client.StoreToken(ctx, in, opts...)
}

func (m *defaultTokenStore) GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*GetTokenRes, error) {
	client := pb.NewTokenStoreClient(m.cli.Conn())
	return client.GetToken(ctx, in, opts...)
}

func (m *defaultTokenStore) RemoveToken(ctx context.Context, in *RemoveTokenReq, opts ...grpc.CallOption) (*RemoveTokenRes, error) {
	client := pb.NewTokenStoreClient(m.cli.Conn())
	return client.RemoveToken(ctx, in, opts...)
}
