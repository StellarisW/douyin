// Code generated by goctl. DO NOT EDIT!
// Source: auth.token_enhancer.proto

package tokenenhancer

import (
	"context"

	"douyin/app/service/auth/rpc/token/enhancer/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GenerateTokenReq      = pb.GenerateTokenReq
	GenerateTokenRes      = pb.GenerateTokenRes
	GenerateTokenRes_Data = pb.GenerateTokenRes_Data
	ReadTokenReq          = pb.ReadTokenReq
	ReadTokenRes          = pb.ReadTokenRes
	ReadTokenRes_Data     = pb.ReadTokenRes_Data
	Token                 = pb.Token

	TokenEnhancer interface {
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenRes, error)
		ReadToken(ctx context.Context, in *ReadTokenReq, opts ...grpc.CallOption) (*ReadTokenRes, error)
	}

	defaultTokenEnhancer struct {
		cli zrpc.Client
	}
)

func NewTokenEnhancer(cli zrpc.Client) TokenEnhancer {
	return &defaultTokenEnhancer{
		cli: cli,
	}
}

func (m *defaultTokenEnhancer) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenRes, error) {
	client := pb.NewTokenEnhancerClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

func (m *defaultTokenEnhancer) ReadToken(ctx context.Context, in *ReadTokenReq, opts ...grpc.CallOption) (*ReadTokenRes, error) {
	client := pb.NewTokenEnhancerClient(m.cli.Conn())
	return client.ReadToken(ctx, in, opts...)
}
